{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cc7bcae6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "055ff51b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('Sample Input - Sample.csv (1).csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1df3a7d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ItemId</th>\n",
       "      <th>ComputerId</th>\n",
       "      <th>ItemName</th>\n",
       "      <th>Comment</th>\n",
       "      <th>Unit</th>\n",
       "      <th>C/S/ID</th>\n",
       "      <th>DataType</th>\n",
       "      <th>BitPos</th>\n",
       "      <th>Address</th>\n",
       "      <th>MAX</th>\n",
       "      <th>...</th>\n",
       "      <th>ScaleMin</th>\n",
       "      <th>Decimal</th>\n",
       "      <th>Unnamed: 14</th>\n",
       "      <th>Unnamed: 15</th>\n",
       "      <th>Unnamed: 16</th>\n",
       "      <th>Unnamed: 17</th>\n",
       "      <th>Unnamed: 18</th>\n",
       "      <th>Unnamed: 19</th>\n",
       "      <th>Unnamed: 20</th>\n",
       "      <th>Positive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>35827</td>\n",
       "      <td>10</td>\n",
       "      <td>L_R1SDW_SPDREF</td>\n",
       "      <td>R1 Screw Down WS Speed Reference (mps)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>REAL : Float</td>\n",
       "      <td>0</td>\n",
       "      <td>0x16464</td>\n",
       "      <td>10000</td>\n",
       "      <td>...</td>\n",
       "      <td>-10000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35828</td>\n",
       "      <td>10</td>\n",
       "      <td>L_R1SDD_SPDREF</td>\n",
       "      <td>R1 Screw Down DS Speed Reference (mps)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>REAL : Float</td>\n",
       "      <td>0</td>\n",
       "      <td>0x16468</td>\n",
       "      <td>10000</td>\n",
       "      <td>...</td>\n",
       "      <td>-10000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35829</td>\n",
       "      <td>10</td>\n",
       "      <td>L_R1SDL_SPDREF</td>\n",
       "      <td>R1 Screw Down LS Speed Reference (mps)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>REAL : Float</td>\n",
       "      <td>0</td>\n",
       "      <td>0x1646c</td>\n",
       "      <td>10000</td>\n",
       "      <td>...</td>\n",
       "      <td>-10000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>35830</td>\n",
       "      <td>10</td>\n",
       "      <td>L_R1SDW_SPDFBK</td>\n",
       "      <td>R1 Screw Down WS Speed Feedback (mps)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>REAL : Float</td>\n",
       "      <td>0</td>\n",
       "      <td>0x16470</td>\n",
       "      <td>10000</td>\n",
       "      <td>...</td>\n",
       "      <td>-10000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35831</td>\n",
       "      <td>10</td>\n",
       "      <td>L_R1SDD_SPDFBK</td>\n",
       "      <td>R1 Screw Down DS Speed Feedback (mps)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>REAL : Float</td>\n",
       "      <td>0</td>\n",
       "      <td>0x16474</td>\n",
       "      <td>10000</td>\n",
       "      <td>...</td>\n",
       "      <td>-10000</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12766</th>\n",
       "      <td>06-05-2022</td>\n",
       "      <td>21:59:36</td>\n",
       "      <td>870</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>194.412003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12767</th>\n",
       "      <td>06-05-2022</td>\n",
       "      <td>21:59:36</td>\n",
       "      <td>875</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>194.412003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12768</th>\n",
       "      <td>06-05-2022</td>\n",
       "      <td>21:59:36</td>\n",
       "      <td>880</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>194.412003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12769</th>\n",
       "      <td>06-05-2022</td>\n",
       "      <td>21:59:36</td>\n",
       "      <td>885</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>194.412003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12770</th>\n",
       "      <td>06-05-2022</td>\n",
       "      <td>21:59:36</td>\n",
       "      <td>890</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>194.412003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12771 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           ItemId ComputerId        ItemName  \\\n",
       "0           35827         10  L_R1SDW_SPDREF   \n",
       "1           35828         10  L_R1SDD_SPDREF   \n",
       "2           35829         10  L_R1SDL_SPDREF   \n",
       "3           35830         10  L_R1SDW_SPDFBK   \n",
       "4           35831         10  L_R1SDD_SPDFBK   \n",
       "...           ...        ...             ...   \n",
       "12766  06-05-2022   21:59:36             870   \n",
       "12767  06-05-2022   21:59:36             875   \n",
       "12768  06-05-2022   21:59:36             880   \n",
       "12769  06-05-2022   21:59:36             885   \n",
       "12770  06-05-2022   21:59:36             890   \n",
       "\n",
       "                                      Comment Unit C/S/ID      DataType  \\\n",
       "0      R1 Screw Down WS Speed Reference (mps)  NaN      0  REAL : Float   \n",
       "1      R1 Screw Down DS Speed Reference (mps)  NaN      0  REAL : Float   \n",
       "2      R1 Screw Down LS Speed Reference (mps)  NaN      0  REAL : Float   \n",
       "3       R1 Screw Down WS Speed Feedback (mps)  NaN      0  REAL : Float   \n",
       "4       R1 Screw Down DS Speed Feedback (mps)  NaN      0  REAL : Float   \n",
       "...                                       ...  ...    ...           ...   \n",
       "12766                                       0    0      0             0   \n",
       "12767                                       0    0      0             0   \n",
       "12768                                       0    0      0             0   \n",
       "12769                                       0    0      0             0   \n",
       "12770                                       0    0      0             0   \n",
       "\n",
       "      BitPos  Address    MAX  ...    ScaleMin Decimal Unnamed: 14 Unnamed: 15  \\\n",
       "0          0  0x16464  10000  ...      -10000       0         NaN         NaN   \n",
       "1          0  0x16468  10000  ...      -10000       0         NaN         NaN   \n",
       "2          0  0x1646c  10000  ...      -10000       0         NaN         NaN   \n",
       "3          0  0x16470  10000  ...      -10000       0         NaN         NaN   \n",
       "4          0  0x16474  10000  ...      -10000       0         NaN         NaN   \n",
       "...      ...      ...    ...  ...         ...     ...         ...         ...   \n",
       "12766      0        0      0  ...  194.412003       0           0           0   \n",
       "12767      0        0      0  ...  194.412003       0           0           0   \n",
       "12768      0        0      0  ...  194.412003       0           0           0   \n",
       "12769      0        0      0  ...  194.412003       0           0           0   \n",
       "12770      0        0      0  ...  194.412003       0           0           0   \n",
       "\n",
       "      Unnamed: 16 Unnamed: 17 Unnamed: 18 Unnamed: 19 Unnamed: 20 Positive  \n",
       "0             NaN         NaN         NaN         NaN         NaN      NaN  \n",
       "1             NaN         NaN         NaN         NaN         NaN      NaN  \n",
       "2             NaN         NaN         NaN         NaN         NaN      NaN  \n",
       "3             NaN         NaN         NaN         NaN         NaN      NaN  \n",
       "4             NaN         NaN         NaN         NaN         NaN      NaN  \n",
       "...           ...         ...         ...         ...         ...      ...  \n",
       "12766           0           0           0          42          44        1  \n",
       "12767           0           0           0          42          44        1  \n",
       "12768           0           0           0          42          42        1  \n",
       "12769           0           0           0          42          42        1  \n",
       "12770           0           0           0          42          42        1  \n",
       "\n",
       "[12771 rows x 22 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3ea8c488",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20       06-05-2022\n",
       "21       06-05-2022\n",
       "22       06-05-2022\n",
       "23       06-05-2022\n",
       "24       06-05-2022\n",
       "            ...    \n",
       "12766    06-05-2022\n",
       "12767    06-05-2022\n",
       "12768    06-05-2022\n",
       "12769    06-05-2022\n",
       "12770    06-05-2022\n",
       "Name: ItemId, Length: 12751, dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ItemId'][20:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "af223653",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20       21:58:33\n",
       "21       21:58:33\n",
       "22       21:58:33\n",
       "23       21:58:33\n",
       "24       21:58:33\n",
       "           ...   \n",
       "12766    21:59:36\n",
       "12767    21:59:36\n",
       "12768    21:59:36\n",
       "12769    21:59:36\n",
       "12770    21:59:36\n",
       "Name: ComputerId, Length: 12751, dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ComputerId'][20:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e894349f",
   "metadata": {},
   "outputs": [],
   "source": [
    "event_timestamp = pd.to_datetime(df['ItemId'][20:] + df['ComputerId'][20:], format='%d-%m-%Y%H:%M:%S')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7769f717",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20      2022-05-06 21:58:33\n",
       "21      2022-05-06 21:58:33\n",
       "22      2022-05-06 21:58:33\n",
       "23      2022-05-06 21:58:33\n",
       "24      2022-05-06 21:58:33\n",
       "                ...        \n",
       "12766   2022-05-06 21:59:36\n",
       "12767   2022-05-06 21:59:36\n",
       "12768   2022-05-06 21:59:36\n",
       "12769   2022-05-06 21:59:36\n",
       "12770   2022-05-06 21:59:36\n",
       "Length: 12751, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "event_timestamp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7f850148",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20       140\n",
       "21       145\n",
       "22       150\n",
       "23       155\n",
       "24       160\n",
       "        ... \n",
       "12766    870\n",
       "12767    875\n",
       "12768    880\n",
       "12769    885\n",
       "12770    890\n",
       "Name: ItemName, Length: 12751, dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ItemName'][20:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bc4bd1bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "for i in range(len(df['ItemName'][20]), len(df['ItemName'][12770])):\n",
    "    print(df['ItemName'][i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "88486683",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "cannot convert the series to <class 'int'>",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [10]\u001b[0m, in \u001b[0;36m<cell line: 5>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m j \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(i\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m12770\u001b[39m):\n\u001b[0;32m      7\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mabs\u001b[39m(\u001b[38;5;28mint\u001b[39m(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mItemName\u001b[39m\u001b[38;5;124m'\u001b[39m][i]) \u001b[38;5;241m-\u001b[39m \u001b[38;5;28mint\u001b[39m(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mItemName\u001b[39m\u001b[38;5;124m'\u001b[39m][j])) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m10\u001b[39m :\n\u001b[1;32m----> 8\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28;43mint\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mMIN\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m20\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m>\u001b[39m\u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m      9\u001b[0m             tag_name\u001b[38;5;241m.\u001b[39mappend(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMIN\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m19\u001b[39m])\n\u001b[0;32m     10\u001b[0m             arr \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marange(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMIN\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m20\u001b[39m:][i], df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMIN\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m20\u001b[39m:][j]) \n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\pandas\\core\\series.py:191\u001b[0m, in \u001b[0;36m_coerce_method.<locals>.wrapper\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    189\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    190\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m converter(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39miloc[\u001b[38;5;241m0\u001b[39m])\n\u001b[1;32m--> 191\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcannot convert the series to \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mconverter\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mTypeError\u001b[0m: cannot convert the series to <class 'int'>"
     ]
    }
   ],
   "source": [
    "tag_name = []\n",
    "tag_desc = []\n",
    "tag_id = []\n",
    "tag_value = []\n",
    "for i in range(20,12770):\n",
    "    for j in range(i+1,12770):\n",
    "        if abs(int(df['ItemName'][i]) - int(df['ItemName'][j])) == 10 :\n",
    "            if int(df['MIN'][20:])>0:\n",
    "                tag_name.append(df['MIN'][19])\n",
    "                arr = np.arange(df['MIN'][20:][i], df['MIN'][20:][j]) \n",
    "                avg = np.average(arr)\n",
    "                tag_value.append(arr)\n",
    "                for i in range(len(df['ItemName'][:19])):\n",
    "                    if df['ItemName'][:19][i] == df['MIN'][19]:\n",
    "                        tag_id.append(df['ItemId'][i])\n",
    "                        tag_desc.append(df['Comment'][i])\n",
    "            elif int(df['ScaleMax'][20:])>0:\n",
    "                tag_name.append(df['Scalemax'][19])\n",
    "                arr = np.arange(int(df['ScaleMax'][20:][i]), int(df['ScaleMax'][20:][j])) \n",
    "                avg = np.average(arr)\n",
    "                tag_value.append(arr)\n",
    "                for i in range(len(df['ItemName'][:19])):\n",
    "                    if df['ItemName'][:19][i] == df['ScaleMax'][19]:\n",
    "                        tag_id.append(df['ItemId'][i])\n",
    "                        tag_desc.append(df['Comment'][i])\n",
    "            elif int(df['ScaleMin'][20:])>0:\n",
    "                tag_name.append(df['ScaleMin'][19])\n",
    "                arr = np.arange(df['ScaleMin'][20:][i], df['ScaleMin'][20:][j]) \n",
    "                avg = np.average(arr)\n",
    "                tag_value.append(arr)\n",
    "                for i in range(len(df['ItemName'][:19])):\n",
    "                    if df['ItemName'][:19][i] == df['ScaleMin'][19]:\n",
    "                        tag_id.append(df['ItemId'][i])\n",
    "                        tag_desc.append(df['Comment'][i])\n",
    "            elif int(df['Positive'][20:])>0:\n",
    "                tag_name.append(df['Positive'][19])\n",
    "                arr = np.arange(df['Positive'][20:][i], df['Positive'][20:][j]) \n",
    "                avg = np.average(arr)\n",
    "                tag_value.append(arr)\n",
    "                for i in range(len(df['ItemName'][:19])):\n",
    "                    if df['ItemName'][:19][i] == df['Positive'][19]:\n",
    "                        tag_id.append(df['ItemId'][i])\n",
    "                        tag_desc.append(df['Comment'][i])\n",
    "                \n",
    "                \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ada7b9d2",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "cannot convert the series to <class 'int'>",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [11]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m j \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(i\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m12770\u001b[39m):\n\u001b[0;32m      3\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mabs\u001b[39m(\u001b[38;5;28mint\u001b[39m(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mItemName\u001b[39m\u001b[38;5;124m'\u001b[39m][i]) \u001b[38;5;241m-\u001b[39m \u001b[38;5;28mint\u001b[39m(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mItemName\u001b[39m\u001b[38;5;124m'\u001b[39m][j])) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m10\u001b[39m :\n\u001b[1;32m----> 4\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28;43mint\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mMIN\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m20\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m>\u001b[39m\u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m      5\u001b[0m             tag_name\u001b[38;5;241m.\u001b[39mappend(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMIN\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m19\u001b[39m])\n\u001b[0;32m      6\u001b[0m             arr \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marange(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMIN\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m20\u001b[39m:][i], df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMIN\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m20\u001b[39m:][j]) \n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\pandas\\core\\series.py:191\u001b[0m, in \u001b[0;36m_coerce_method.<locals>.wrapper\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    189\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    190\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m converter(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39miloc[\u001b[38;5;241m0\u001b[39m])\n\u001b[1;32m--> 191\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcannot convert the series to \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mconverter\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mTypeError\u001b[0m: cannot convert the series to <class 'int'>"
     ]
    }
   ],
   "source": [
    "for i in range(20,12770):\n",
    "    for j in range(i+1,12770):\n",
    "        if abs(int(df['ItemName'][i]) - int(df['ItemName'][j])) == 10 :\n",
    "            if int(df['MIN'][20:])>0:\n",
    "                tag_name.append(df['MIN'][19])\n",
    "                arr = np.arange(df['MIN'][20:][i], df['MIN'][20:][j]) \n",
    "                avg = np.average(arr)\n",
    "                tag_value.append(arr)\n",
    "                for i in range(len(df['ItemName'][:19])):\n",
    "                    if df['ItemName'][:19][i] == df['MIN'][19]:\n",
    "                        tag_id.append(df['ItemId'][i])\n",
    "                        tag_desc.append(df['Comment'][i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68cc5e6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(20,12770):\n",
    "    for j in range(i+1,12770):\n",
    "        if abs(int(df['ItemName'][i]) - int(df['ItemName'][j])) == 10 :\n",
    "            for k in range(i, j):\n",
    "                df['MIN'][k] = int(df['MIN'][k])\n",
    "                if df['MIN'][k] >0:\n",
    "                    tag_name.append(df['MIN'][19])\n",
    "print(tag_name)\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16793b82",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(20, 25):\n",
    "    df['MIN'][i] = int(df['MIN'][i])\n",
    "    print(type(df['MIN'][i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f8be783",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(20,12770):\n",
    "    for j in range(i+1,12770):\n",
    "        if abs(int(df['ItemName'][i]) - int(df['ItemName'][j])) == 10 :\n",
    "            for k in range(i, j):\n",
    "                df['MIN'][k] = int(df['MIN'][k])\n",
    "                print(df['MIN'][k])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6af9af3c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
